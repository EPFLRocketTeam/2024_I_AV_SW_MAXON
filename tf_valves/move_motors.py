from epos_setup import *
from main import *
import RPi.GPIO as GPIO


# VALVE OPENING ANGLES
VALVE_1_FULL = 90
VALVE_2_FULL = 90
VALVE_1_INTERMEDIATE = 45
VALVE_2_INTERMEDIATE = 45

# CONFIGURATION
NODE_ID_1 = 1  # Node ID
NODE_ID_2 = 2
USB_1 = b'USB0'   # USB port
USB_2 = b'USB1'
VALVE_PIN_1_FULL = 5  # GPIO pin to control the valve motor
VALVE_PIN_2_FULL = 6
VALVE_PIN_1_INTERMEDIATE = 20
VALVE_PIN_2_INTERMEDIATE = 21
HOME_VALVE_PIN_1 = 13    # GPIO pin to home the valve motor
HOME_VALVE_PIN_2 = 19
VALVE_INCREMENT_per_turn = 1703936 # 90 degrees 1703936 (131072 steps/turn on motor)
VALVE_1_INCREMENT_FULL = VALVE_1_FULL/360 * VALVE_INCREMENT_per_turn
VALVE_2_INCREMENT_FULL = VALVE_2_FULL/360 * VALVE_INCREMENT_per_turn
VALVE_1_INCREMENT_INTERMEDIATE = VALVE_1_INTERMEDIATE/360 * VALVE_INCREMENT_per_turn
VALVE_2_INCREMENT_INTERMEDIATE = VALVE_2_INTERMEDIATE/360 * VALVE_INCREMENT_per_turn
HOMING_INCREMENT = 1000
VELOCITY = 7142   # RPM
ACCELERATION = 4294967295    # RPM/s
DECELERATION = 4294967295    # RPM/s




###################     SETUP     ###################
# setup GPIO Pins
GPIO.setmode(GPIO.BCM)
GPIO.setup(VALVE_PIN_1_FULL, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)   # VALVE_1 control pin
GPIO.setup(VALVE_PIN_2_FULL, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)   # VALVE_2 control pin
GPIO.setup(VALVE_PIN_1_INTERMEDIATE, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)   # VALVE_1 control pin
GPIO.setup(VALVE_PIN_2_INTERMEDIATE, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(HOME_VALVE_PIN_1, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)   # VALVE_1 control pin
GPIO.setup(HOME_VALVE_PIN_2, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)   # VALVE_2 control pin

# setup epos
epos_1, keyhandle_1, NodeID_1, pErrorCode_1, pDeviceErrorCode_1 = epos_setup(NODE_ID_1, USB_1, VELOCITY, ACCELERATION, DECELERATION)
epos_2, keyhandle_2, NodeID_2, pErrorCode_2, pDeviceErrorCode_2 = epos_setup(NODE_ID_2, USB_2, VELOCITY, ACCELERATION, DECELERATION)


PIN_1_STATE_FULL = GPIO.input(VALVE_PIN_1_FULL)
PIN_1_STATE_INTERMEDIATE = GPIO.input(VALVE_PIN_1_INTERMEDIATE)

PIN_2_STATE_FULL = GPIO.input(VALVE_PIN_2_FULL)
PIN_2_STATE_INTERMEDIATE = GPIO.input(VALVE_PIN_2_INTERMEDIATE)


VALVE_1_STATE = 0
VALVE_2_STATE = 0

VALVE_1_PIN_FILTER_VALUE_FULL = 0
VALVE_1_PIN_FILTER_VALUE_INTERMEDIATE = 0
VALVE_1_PIN_FILTER_VALUE_HOME = 0
VALVE_2_PIN_FILTER_VALUE_FULL = 0
VALVE_2_PIN_FILTER_VALUE_INTERMEDIATE = 0
VALVE_2_PIN_FILTER_VALUE_HOME = 0

VALVE_1_PIN_VALUE_FULL = 0
VALVE_1_PIN_VALUE_INTERMEDIATE = 0
VALVE_1_PIN_VALUE_HOME = 0
VALVE_2_PIN_VALUE_FULL = 0
VALVE_2_PIN_VALUE_INTERMEDIATE = 0
VALVE_2_PIN_VALUE_HOME = 0

def filter():
    # read GPIO pins
    FACTOR = 0.2
    VALVE_1_PIN_FILTER_VALUE_FULL += GPIO.input(VALVE_PIN_1_FULL)*FACTOR + (1-FACTOR)*VALVE_1_PIN_VALUE_FULL
    VALVE_1_PIN_FILTER_VALUE_INTERMEDIATE += GPIO.input(VALVE_PIN_1_INTERMEDIATE)*FACTOR + (1-FACTOR)*VALVE_1_PIN_VALUE_INTERMEDIATE
    VALVE_1_PIN_FILTER_VALUE_HOME += GPIO.input(HOME_VALVE_PIN_1)*FACTOR + (1-FACTOR)*VALVE_1_PIN_VALUE_HOME
    VALVE_2_PIN_FILTER_VALUE_FULL += GPIO.input(VALVE_PIN_2_FULL)*FACTOR + (1-FACTOR)*VALVE_2_PIN_VALUE_FULL
    VALVE_2_PIN_FILTER_VALUE_INTERMEDIATE += GPIO.input(VALVE_PIN_2_INTERMEDIATE)*FACTOR + (1-FACTOR)*VALVE_2_PIN_VALUE_INTERMEDIATE
    VALVE_2_PIN_FILTER_VALUE_HOME += GPIO.input(HOME_VALVE_PIN_2)*FACTOR + (1-FACTOR)*VALVE_2_PIN_VALUE_HOME

    VALVE_1_PIN_VALUE_FULL = VALVE_1_PIN_FILTER_VALUE_FULL>0.5
    VALVE_1_PIN_VALUE_INTERMEDIATE = VALVE_1_PIN_FILTER_VALUE_INTERMEDIATE>0.5
    VALVE_1_PIN_VALUE_HOME = VALVE_1_PIN_FILTER_VALUE_HOME>0.5
    VALVE_2_PIN_VALUE_FULL = VALVE_2_PIN_FILTER_VALUE_FULL>0.5
    VALVE_2_PIN_VALUE_INTERMEDIATE = VALVE_2_PIN_FILTER_VALUE_INTERMEDIATE>0.5
    VALVE_2_PIN_VALUE_HOME = VALVE_2_PIN_FILTER_VALUE_HOME>0.5


while True:

    TIME_SLEEP = 0.05
    filter()
    if VALVE_1_PIN_VALUE_FULL == GPIO.LOW and PIN_1_STATE_FULL == GPIO.HIGH:
        print('test1')
        PIN_1_STATE_FULL = GPIO.LOW
        move_to_position(epos_1, keyhandle_1, NodeID_1, pErrorCode_1, 0)
        time.sleep(TIME_SLEEP)
    elif VALVE_1_PIN_VALUE_FULL == GPIO.HIGH and PIN_1_STATE_FULL == GPIO.LOW:
        print('test2')
        PIN_1_STATE_FULL = GPIO.HIGH
        move_to_position(epos_1, keyhandle_1, NodeID_1, pErrorCode_1, VALVE_1_INCREMENT_FULL)
        time.sleep(TIME_SLEEP)
    if VALVE_2_PIN_VALUE_FULL == GPIO.LOW and PIN_2_STATE_FULL == GPIO.HIGH:
        print('test3')
        PIN_2_STATE_FULL = GPIO.LOW
        move_to_position(epos_2, keyhandle_2, NodeID_2, pErrorCode_2, 0)
        time.sleep(TIME_SLEEP)
    elif VALVE_2_PIN_VALUE_FULL == GPIO.HIGH and PIN_2_STATE_FULL == GPIO.LOW:
        print('test4')
        PIN_2_STATE_FULL = GPIO.HIGH
        move_to_position(epos_2, keyhandle_2, NodeID_2, pErrorCode_2, VALVE_2_INCREMENT_FULL)
        time.sleep(TIME_SLEEP)

    if VALVE_1_PIN_VALUE_INTERMEDIATE == GPIO.LOW and PIN_1_STATE_INTERMEDIATE == GPIO.HIGH:
        PIN_1_STATE_INTERMEDIATE = GPIO.LOW
        move_to_position(epos_1, keyhandle_1, NodeID_1, pErrorCode_1, 0)
        time.sleep(TIME_SLEEP)
    elif VALVE_1_PIN_VALUE_INTERMEDIATE == GPIO.HIGH and PIN_1_STATE_INTERMEDIATE == GPIO.LOW:
        PIN_1_STATE_INTERMEDIATE = GPIO.HIGH
        move_to_position(epos_1, keyhandle_1, NodeID_1, pErrorCode_1, VALVE_1_INCREMENT_INTERMEDIATE)
        time.sleep(TIME_SLEEP)

    if VALVE_2_PIN_VALUE_INTERMEDIATE == GPIO.LOW and PIN_2_STATE_INTERMEDIATE == GPIO.HIGH:
        PIN_2_STATE_INTERMEDIATE = GPIO.LOW
        move_to_position(epos_2, keyhandle_2, NodeID_2, pErrorCode_2, 0)
        time.sleep(TIME_SLEEP)
    elif VALVE_2_PIN_VALUE_INTERMEDIATE == GPIO.HIGH and PIN_2_STATE_INTERMEDIATE == GPIO.LOW:
        PIN_2_STATE_INTERMEDIATE = GPIO.HIGH
        move_to_position(epos_2, keyhandle_2, NodeID_2, pErrorCode_2, VALVE_2_INCREMENT_INTERMEDIATE)
        time.sleep(TIME_SLEEP)
    
    if VALVE_1_PIN_VALUE_HOME != GPIO.LOW:
        while GPIO.input(HOME_VALVE_PIN_1) != GPIO.LOW:
            go_to_position(epos_1, keyhandle_1, NodeID_1, pErrorCode_1, HOMING_INCREMENT)
            filter()
        time.sleep(TIME_SLEEP)
        set_home_position(epos_1, keyhandle_1, NodeID_1, pErrorCode_1)

    if VALVE_2_PIN_VALUE_HOME != GPIO.LOW:
        while GPIO.input(HOME_VALVE_PIN_2) != GPIO.LOW:
            go_to_position(epos_2, keyhandle_2, NodeID_2, pErrorCode_2, HOMING_INCREMENT)
            filter()
        time.sleep(TIME_SLEEP)
        set_home_position(epos_2, keyhandle_2, NodeID_2, pErrorCode_2)
